// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Region {
  AHAFO
  ASHANTI
  BONO_EAST
  CENTRAL
  EASTERN
  GREATER_ACCRA
  NORTH_EAST
  NORTHERN
  OTI
  SAVANNAH
  UPPER_EAST
  UPPER_WEST
  VOLTER
  WESTERN
  WESTERN_NORTH
}

enum MeasureType {
  DEFAULT_TYPE
  CUSTOM
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id           String  @id @default(ulid()) @db.VarChar(255)
  phoneNumber  String  @unique @map("phone_number") @db.VarChar(100)
  emailAddress String  @unique @map("email_address") @db.VarChar(255)
  companyName  String  @unique @map("company_name") @db.VarChar(255)
  password     String  @db.VarChar(255)
  fullName     String  @map("full_name") @db.VarChar(255)
  address      String  @map("address") @db.VarChar(255)
  region       Region  @map("region")
  imagePath    String? @map("image_path") @db.Text
  isVerified   Boolean @default(false) @map("is_verified")

  otps              Otp[]
  refreshTokens     RefreshToken[]
  maleMeasurement   MaleMeasurement[]
  femaleMeasurement FemaleMeasurement[]
  clothImage        ClothImage[]
  customer          Customer[]
  dressCollection   DressCollection[]
  customerDetails   CustomerDetails[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("users")
}

model Otp {
  id        String   @id @default(ulid())
  code      String   @unique @db.VarChar(255)
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp")
}

model RefreshToken {
  id           String   @id @default(ulid()) @db.VarChar(255)
  refreshToken String   @unique @map("refresh_token") @db.VarChar(255)
  userId       String   @map("user_id") @db.VarChar(255)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model Customer {
  id              String            @id @default(ulid())
  fullName        String            @map("full_name") @db.VarChar(255)
  phoneNumber     String            @unique @map("phone_number") @db.VarChar(100)
  address         String            @db.VarChar(100)
  dressCollection DressCollection[]
  clothImage      ClothImage[]
  customerDetails CustomerDetails[]
  userId          String            @map("user_id") @db.VarChar(255)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("customers")
}

model ClothImage {
  id         String @id @default(ulid()) @db.VarChar(255)
  imageUrl   String @map("image_url") @db.VarChar(255)
  customerId String @map("customer_id") @db.VarChar(255)
  userId     String @map("user_id") @db.VarChar(255)

  customer Customer @relation(fields: [customerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("cloth_images")
}

model CustomerDetails {
  id                  String   @id @default(ulid()) @db.VarChar(255)
  userId              String   @map("user_id") @db.VarChar(255)
  customerId          String   @map("customer_id") @db.VarChar(255)
  femaleMeasurementId String   @map("female_measurement_id") @db.VarChar(255)
  maleMeasurementId   String   @map("male_measurement_id") @db.VarChar(255)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")

  user              User              @relation(fields: [userId], references: [id])
  customer          Customer          @relation(fields: [customerId], references: [id])
  femaleMeasurement FemaleMeasurement @relation(fields: [femaleMeasurementId], references: [id])
  maleMeasurement   MaleMeasurement   @relation(fields: [maleMeasurementId], references: [id])

  @@map("customer_details")
}

model DressCollection {
  id          String   @id @default(ulid()) @db.VarChar(255)
  customerId  String   @map("customer_id") @db.VarChar(255)
  amount      Int      @map("amount")
  collectDate DateTime @map("collect_date")
  deadline    DateTime @map("deadline")
  isCollected Boolean  @map("is_collected") @db.Boolean
  userId      String   @map("user_id") @db.VarChar(255)

  user     User     @relation(fields: [userId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("dress_collections")
}

model MaleMeasurement {
  id          String      @id @default(ulid()) @db.VarChar(255)
  userId      String      @map("user_id") @db.VarChar(255)
  name        String      @db.VarChar(255)
  measureType MeasureType @default(DEFAULT_TYPE) @map("measure_type") // remove default later
  status      Boolean     @default(false) @map("status")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")

  user            User              @relation(fields: [userId], references: [id])
  customerDetails CustomerDetails[]

  @@map("male_measurements")
}

model FemaleMeasurement {
  id          String      @id @default(ulid()) @db.VarChar(255)
  userId      String      @map("user_id") @db.VarChar(255)
  name        String      @db.VarChar(255)
  measureType MeasureType @default(DEFAULT_TYPE) @map("measure_type")
  status      Boolean     @default(false) @map("status")

  user            User              @relation(fields: [userId], references: [id])
  customerDetails CustomerDetails[]

  @@map("female_measurements")
}
